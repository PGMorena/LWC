Lightning Web Components is a new programming model for building Lightning components.
Aura-based Lightning components are built using both HTML and JavaScript, but LWC is built directly on the Web stack. A developer who works on LWC is not only using coding skills on a particular framework but in other frameworks like React or Angular, which are based on the Web Stack.
A Web stack is the collection of software required for Web development. At a minimum, a Web stack contains an operating system (OS), a programming language, database software and a Web server. LAMP is one commonly used Web stack.
XAMPP stands for X-OS(Cross-platform), Apache, MariaDB(Mysql), PHP and Perl.
LAMP is one commonly used Web stack. It uses Linux as the operating system, Apache as the Web server, MySQL as the relational database management system and PHP as the object-oriented scripting language.
A component that renders UI must have an HTML template file and a JavaScript class file. It may include a CSS file, additional JavaScript utility files, and test files. The HTML template, JavaScript class, and CSS file must have the same name. The framework uses the name to autowire the relationship between them.

mynamespace
    └──myComponent
        ├──__tests__
        |       └──myComponent.test.js
        ├──myComponent.html
        ├──myComponent.js
        ├──shareCode.js
        └──myComponent.css
        
https://lwc.dev/guide/reference

Lightning web components are custom elements built using HTML and modern JavaScript.
The Lightning Web Components UI framework uses core Web Components standards and provides only what’s necessary to perform well in browsers.

<----Web Components---->
Web Components are a new browser feature that provides a standard component model for the Web, consisting of several pieces maintained in different places:

Shadow DOM
Most of the parts are now maintained in DOM Standard, called shadow trees. Some of the parts are still remained in this repository. See Issue #661 for the progress of upstreaming those parts from the partially out-of-date Shadow DOM document.
Issues against the DOM and HTML Standard.
Issues raised in this repository.
The old issue tracker on W3C bugzilla, which is no longer used.
Custom Elements
Custom elements were upstreamed into the HTML Standard (and bits in the DOM Standard) and are maintained there.
Issues against the DOM and HTML Standard.
Issues raised in this repository.
The old issue tracker on W3C bugzilla, which is no longer used.
HTML Templates
HTML Templates were upstreamed into the HTML Standard and are fully maintained there.
CSS changes
The CSS WG works on CSS Scoping and CSS Shadow Parts, which help dealing with shadow trees with various selectors. Various other parts of CSS and its object model are also impacted by shadow trees and directly worked on in the various CSS specificaions.
Issues against the CSS WG repository.
JSON, CSS, HTML Modules
Successor to the abandoned HTML Imports, allows JSON, CSS, and HTML markup to be requested by a component. HTML Modules Spec work is being incubated upstream in whatwg/html (see PR). For new issues, please file against whatwg/html or here in w3c/webcomponents. See also the HTML Modules explainer, initial proposal, and earlier design ideas.
Issues raised in HTML Standard
Issues raised in this repository. Includes related issues for other potential module-types, such as CSS and JSON.
Old issue tracker includes a few issues filed when the feature was first proposed. Please avoid filing new issues there.






